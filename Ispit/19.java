//Дадена е низа од N работни задачи, со проценето времетраење во часови, кои треба да се извршат во една компанија. Компанијата има на располагање M вработени кои работат по 8 часа на ден. Сите работни активности се помали или еднакви од 8 часа и не може да се извршат половично
//
//Ваша задача е да ја распределите работата помеѓу вработените така што работните задачи ќе се извршат за најкраток можен рок.
//
//Влез: На влез се дадени два броја, N, бројот на задачи и M бројот на вработени.
//
//Во вториот ред на влезот дадени се N цели броеви кои го означуваат времетраењето на секоја задача.
//
//Излез: На излез прво се печати бројот на работни денови потребни за да се извршат задачите. Потоа се печати збирот од вкупниот број на слободни часови кај сите вработени според вашата распределба.
//
//Пример:
//Влез:
//7 2
//8 7 3 5 1 3 1
//Излез:
//2 4
//Појаснување:
//Имаме двајца вработени. Првиот ден еден од вработените ќе ја изврши задачата од 8 часа, а вториот задачите од 7 и 1 час. Вториот ден еден од вработените ќе ги изврши задачите од 5 и 3 часа, а вториот задачите од 3 и 1 час. На овој вработен ќе му останат 4 слободни часа, па тоа го печатиме на излез.


import java.util.*;

public class Main {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);

        ArrayList<Integer> jobs = new ArrayList<>();

        int n = scanner.nextInt();
        int m = scanner.nextInt();
        for(int i=0; i<n; i++){
            jobs.add(scanner.nextInt());
        }

        jobs.sort(Comparator.reverseOrder());

        int daysRequired = 0;
        int totalHours = 0;

        while(n>0){
            daysRequired++;

            int []employeeHours = new int[m];
            for(int i=0; i<jobs.size(); i++){
                for(int j=0; j<m; j++){
                    if(jobs.get(i)!=-1 && jobs.get(i)+employeeHours[j]<=8){
                        employeeHours[j]+=jobs.get(i);
                        totalHours+=jobs.get(i);
                        jobs.set(i, -1);
                        n--;
                    }
                }
            }
        }

        int freeHours = (daysRequired*8*m)-totalHours;

        System.out.println(daysRequired + " " + freeHours);
    }
}
